// -*- coding: utf-8 -*-

// Created on Thu Nov  7 08:51.08 PM EST 2024
// author: Ryan Hildebrandt, github.com/ryancahildebrandt

package main

import (
	"errors"
	"fmt"
	"reflect"
	"slices"
	"sort"
	"testing"
)

func TestGraphFrom(t *testing.T) {
	table := []struct {
		// g Graph
		e   EdgeList
		n   int
		exp []int
	}{
		{EdgeList{}, -1, []int{}},
		{EdgeList{}, 0, []int{}},
		{EdgeList{{0, 1, 1.0}}, 2, []int{}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, 0, []int{1}},
		{EdgeList{{0, 1, 1.0}, {0, 3, 1.0}, {0, 5, 1.0}, {1, 6, 1.0}, {3, 6, 1.0}, {5, 6, 1.0}}, 6, []int{}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 4, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {5, 7, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, 2, []int{3, 4}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, 5, []int{6}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 5, 1.0}, {2, 7, 1.0}, {2, 8, 1.0}, {3, 8, 1.0}, {5, 8, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, 2, []int{3, 5, 7, 8}},
	}
	for i, test := range table {
		g := NewGraph(test.e, []Expression{})
		res := g.From(test.n)
		if fmt.Sprint(res) != fmt.Sprint(test.exp) {
			t.Errorf("test %v: Graph(%v).From(%v)\nGOT %v\nEXP %v", i, test.e, test.n, res, test.exp)
		}
	}
}

func TestGraphWeight(t *testing.T) {
	table := []struct {
		g   Graph
		f   int
		t   int
		exp float64
	}{
		{Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}, 0, 0, 1.0},
		{Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}, -1, 0, 1.0},
		{Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}, 0, -1, 1.0},
		{Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}, -1, -1, 1.0},
		{Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, map[int][]int{0: {1}, 1: {2}}, map[int]map[int]float64{0: {1: 1.0}, 1: {2: 1.0}}}, 0, 0, 1.0},
		{Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {0, 3, 0.99}, {0, 5, 0.0}, {1, 6, 100}, {3, 6, 99}, {5, 6, 9}}, map[int][]int{0: {1, 3, 5}, 1: {6}, 3: {6}, 5: {6}}, map[int]map[int]float64{0: {1: 1.0, 3: 0.99, 5: 0.0}, 1: {6: 100}, 3: {6: 99}, 5: {6: 9}}}, 0, 1, 1.0},
		{Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {0, 3, 0.99}, {0, 5, 0.0}, {1, 6, 100}, {3, 6, 99}, {5, 6, 9}}, map[int][]int{0: {1, 3, 5}, 1: {6}, 3: {6}, 5: {6}}, map[int]map[int]float64{0: {1: 1.0, 3: 0.99, 5: 0.0}, 1: {6: 100}, 3: {6: 99}, 5: {6: 9}}}, 0, 5, 0.0},
		{Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {0, 3, 0.99}, {0, 5, 0.0}, {1, 6, 100}, {3, 6, 99}, {5, 6, 9}}, map[int][]int{0: {1, 3, 5}, 1: {6}, 3: {6}, 5: {6}}, map[int]map[int]float64{0: {1: 1.0, 3: 0.99, 5: 0.0}, 1: {6: 100}, 3: {6: 99}, 5: {6: 9}}}, 1, 6, 100},
		{Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {0, 3, 0.99}, {0, 5, 0.0}, {1, 6, 100}, {3, 6, 99}, {5, 6, 9}}, map[int][]int{0: {1, 3, 5}, 1: {6}, 3: {6}, 5: {6}}, map[int]map[int]float64{0: {1: 1.0, 3: 0.99, 5: 0.0}, 1: {6: 100}, 3: {6: 99}, 5: {6: 9}}}, 5, 6, 9},
	}
	for i, test := range table {
		res := test.g.Weight(test.f, test.t)
		if test.exp != res {
			t.Errorf("test %v: %v.Weight(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.f, test.t, res, test.exp)
		}
	}
}

func TestGraphAddEdge(t *testing.T) {
	table := []struct {
		e   EdgeList
		edg Edge
		exp Graph
	}{
		{EdgeList{}, Edge{}, Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}},
		{EdgeList{}, Edge{0, 0, 1.0}, Graph{[]Expression{}, EdgeList{}, map[int][]int{}, map[int]map[int]float64{}}},
		{EdgeList{}, Edge{1, 10, 1.0}, Graph{[]Expression{}, EdgeList{{1, 10, 1.0}}, map[int][]int{1: {10}}, map[int]map[int]float64{1: {10: 1.0}}}},
		{EdgeList{{0, 1, 1.0}}, Edge{}, Graph{[]Expression{}, EdgeList{{0, 1, 1.0}}, map[int][]int{0: {1}}, map[int]map[int]float64{0: {1: 1.0}}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, Edge{1, 2, 1.0}, Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {1, 2, 1.0}}, map[int][]int{0: {1}, 1: {2, 2}}, map[int]map[int]float64{0: {1: 1.0}, 1: {2: 1.0}}}},
		{EdgeList{{0, 1, 0.99}, {1, 2, 1.0}}, Edge{1, 2, 1.0}, Graph{[]Expression{}, EdgeList{{0, 1, 0.99}, {1, 2, 1.0}, {1, 2, 1.0}}, map[int][]int{0: {1}, 1: {2, 2}}, map[int]map[int]float64{0: {1: 0.99}, 1: {2: 1.0}}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, Edge{1, 2, 0.99}, Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {1, 2, 0.99}}, map[int][]int{0: {1}, 1: {2, 2}}, map[int]map[int]float64{0: {1: 1.0}, 1: {2: 0.99}}}},
		{EdgeList{{0, 1, 0.99}, {1, 2, 1.0}}, Edge{1, 2, 0.99}, Graph{[]Expression{}, EdgeList{{0, 1, 0.99}, {1, 2, 1.0}, {1, 2, 0.99}}, map[int][]int{0: {1}, 1: {2, 2}}, map[int]map[int]float64{0: {1: 0.99}, 1: {2: 0.99}}}},
		{EdgeList{{0, 1, 1.0}, {0, 3, 1.0}, {0, 5, 1.0}, {1, 6, 1.0}, {3, 6, 1.0}, {5, 6, 1.0}}, Edge{8, 9, 1.0}, Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {0, 3, 1.0}, {0, 5, 1.0}, {1, 6, 1.0}, {3, 6, 1.0}, {5, 6, 1.0}, {8, 9, 1.0}}, map[int][]int{0: {1, 3, 5}, 1: {6}, 3: {6}, 5: {6}, 8: {9}}, map[int]map[int]float64{0: {1: 1.0, 3: 1.0, 5: 1.0}, 1: {6: 1.0}, 3: {6: 1.0}, 5: {6: 1.0}, 8: {9: 1.0}}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 4, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {5, 7, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, Edge{0, 2, 1.0}, Graph{[]Expression{}, EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 4, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {5, 7, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {0, 2, 1.0}}, map[int][]int{0: {1, 2}, 1: {2}, 2: {3, 4}, 3: {4}, 4: {5}, 5: {6, 7}, 6: {7}, 7: {8}}, map[int]map[int]float64{0: {1: 1.0, 2: 1.0}, 1: {2: 1.0}, 2: {3: 1.0, 4: 1.0}, 3: {4: 1.0}, 4: {5: 1.0}, 5: {6: 1.0, 7: 1.0}, 6: {7: 1.0}, 7: {8: 1.0}}}},
	}
	for i, test := range table {
		g := NewGraph(test.e, []Expression{})
		res := g.AddEdge(test.edg)
		if fmt.Sprint(res.Nodes) != fmt.Sprint(test.exp.Nodes) {
			t.Errorf("test %v: Graph(%v).AddEdge(%v).Nodes\nGOT %v\nEXP %v", i, test.e, test.edg, res.Nodes, test.exp.Nodes)
		}
		if fmt.Sprint(res.Edges.Sort()) != fmt.Sprint(test.exp.Edges.Sort()) {
			t.Errorf("test %v: Graph(%v).AddEdge(%v).Edges\nGOT %v\nEXP %v", i, test.e, test.edg, res.Edges, test.exp.Edges)
		}
		if !reflect.DeepEqual(res.Children, test.exp.Children) {
			t.Errorf("test %v: Graph(%v).AddEdge(%v).Children\nGOT %v\nEXP %v", i, test.e, test.edg, res.Children, test.exp.Children)
		}
		if !reflect.DeepEqual(res.Weights, test.exp.Weights) {
			t.Errorf("test %v: Graph(%v).AddEdge(%v).Weights\nGOT %v\nEXP %v", i, test.e, test.edg, res.Weights, test.exp.Weights)
		}
	}
}

func TestGraphEndPoints(t *testing.T) {
	table := []struct {
		e EdgeList
		i int
		f int
	}{
		{EdgeList{}, 0, 0},
		{EdgeList{{0, 1, 1.0}}, 0, 1},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, 0, 2},
		{EdgeList{{10, 0, 1.0}, {0, 1, 1.0}, {1, 2, 1.0}, {2, 20, 1.0}}, 10, 20},
		{EdgeList{{1, 11, 1.0}, {11, 62, 1.0}, {62, 2, 1.0}, {2, 3, 1.0}, {3, 2, 1.0}, {2, 4, 1.0}, {4, 8, 1.0}, {8, 44, 1.0}}, 1, 44},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 11, 1.0}, {2, 15, 1.0}, {2, 24, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 8, 1.0}, {15, 20, 1.0}, {17, 18, 1.0}, {18, 19, 1.0}, {19, 8, 1.0}, {20, 21, 1.0}, {21, 22, 1.0}, {22, 23, 1.0}, {23, 17, 1.0}, {24, 25, 1.0}, {25, 30, 1.0}, {27, 28, 1.0}, {28, 29, 1.0}, {29, 8, 1.0}, {30, 31, 1.0}, {30, 33, 1.0}, {30, 35, 1.0}, {31, 36, 1.0}, {33, 36, 1.0}, {35, 36, 1.0}, {36, 37, 1.0}, {37, 27, 1.0}}, 0, 10},
	}
	for _, test := range table {
		g := NewGraph(test.e, []Expression{})
		initial, final := g.EndPoints()
		if initial != test.i || final != test.f {
			t.Errorf("%v.EndPoints()\nGOT %v, %v\nEXP %v, %v", test.e, initial, final, test.i, test.f)
		}
	}
}

func TestGraphAllPaths(t *testing.T) {
	table := []struct {
		e   EdgeList
		exp []Path
	}{
		{EdgeList{{0, 1, 1.0}}, []Path{{0, 1}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, []Path{{0, 1, 2}}},
		{EdgeList{{0, 1, 1.0}, {0, 3, 1.0}, {0, 5, 1.0}, {1, 6, 1.0}, {3, 6, 1.0}, {5, 6, 1.0}}, []Path{{0, 1, 6}, {0, 3, 6}, {0, 5, 6}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 4, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {5, 7, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 4, 5, 6, 7, 8}, {0, 1, 2, 4, 5, 7, 8}, {0, 1, 2, 3, 4, 5, 7, 8}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 5, 1.0}, {2, 7, 1.0}, {2, 8, 1.0}, {3, 8, 1.0}, {5, 8, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 8, 9}, {0, 1, 2, 5, 8, 9}, {0, 1, 2, 7, 8, 9}, {0, 1, 2, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 5, 1.0}, {2, 7, 1.0}, {3, 8, 1.0}, {5, 8, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 8, 9}, {0, 1, 2, 5, 8, 9}, {0, 1, 2, 7, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {3, 7, 1.0}, {4, 6, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 7, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {3, 5, 1.0}, {6, 8, 1.0}, {9, 11, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {14, 15, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {3, 5, 1.0}, {7, 9, 1.0}, {11, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 3, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 7, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 13, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {2, 12, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 12, 13}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {9, 14, 1.0}, {5, 14, 1.0}, {14, 15, 1.0}, {2, 14, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 8, 1.0}, {3, 7, 1.0}, {4, 6, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 7, 8, 9}, {0, 1, 2, 8, 9}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {2, 12, 1.0}, {3, 5, 1.0}, {6, 8, 1.0}, {9, 11, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 12, 13}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}, {2, 14, 1.0}, {3, 5, 1.0}, {7, 9, 1.0}, {11, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 3, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 7, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 13, 14, 15}, {0, 1, 2, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 13, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {10, 12, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 11, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}, {10, 11, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}, {12, 14, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 11, 12, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 7, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 12, 14, 15}}},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {1, 12, 1.0}, {6, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 12, 13, 14}}},
	}
	for i, test := range table {
		g := NewGraph(test.e, []Expression{})
		res := g.AllPaths()
		sort.Slice(res, func(i, j int) bool { return fmt.Sprint(res[i]) < fmt.Sprint(res[j]) })
		sort.Slice(test.exp, func(i, j int) bool { return fmt.Sprint(test.exp[i]) < fmt.Sprint(test.exp[j]) })
		if fmt.Sprint(res) != fmt.Sprint(test.exp) {
			t.Errorf("test %v: %v.AllPaths()\nGOT %v\nEXP %v", i, test.e, res, test.exp)
		}
	}
}

func TestGraphCompose(t *testing.T) {
	dummy_error := errors.New("")
	table := []struct {
		g   Graph
		h   Graph
		i   int
		exp Graph
		err error
	}{
		{
			NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{"a", "b"}),
			NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{"c", "d"}),
			0,
			NewGraph(EdgeList{{2, 3, 1.0}, {3, 1, 1.0}}, []Expression{"a", "b", "c", "d"}),
			nil,
		},
		{
			NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{"c", "d"}),
			NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{"a", "b"}),
			1,
			NewGraph(EdgeList{{0, 2, 1.0}, {2, 3, 1.0}}, []Expression{"c", "d", "a", "b"}),
			nil,
		},
		{
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 10, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}}, []Expression{"a", "b", "c", "d"}),
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}}, []Expression{"a", "b", "c", "d"}),
			0,
			NewGraph(EdgeList{{15, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 10, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Expression{"a", "b", "c", "d", "a", "b", "c", "d"}),
			nil,
		},
		{
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 10, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}}, []Expression{""}),
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}}, []Expression{""}),
			5,
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 11, 1.0}, {15, 10, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Expression{"", ""}),
			nil,
		},
		{
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 10, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}}, []Expression{"a", "b", "c"}),
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}}, []Expression{}),
			10,
			NewGraph(EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 11, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 11, 1.0}, {7, 9, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Expression{"a", "b", "c"}),
			nil,
		},

		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), -1, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), 0, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), 2, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), -1, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), 0, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{}, []Expression{}), NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), 2, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), -1, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), 0, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), NewGraph(EdgeList{}, []Expression{}), 2, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), -1, NewGraph(EdgeList{}, []Expression{}), dummy_error},
		{NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), NewGraph(EdgeList{{0, 1, 1.0}}, []Expression{}), 2, NewGraph(EdgeList{}, []Expression{}), dummy_error},
	}
	for i, test := range table {
		res, err := ComposeGraphs(test.g, test.h, test.i)
		if fmt.Sprint(res.Nodes) != fmt.Sprint(test.exp.Nodes) {
			t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, res.Nodes, test.exp.Nodes)
		}
		if fmt.Sprint(res.Edges.Sort()) != fmt.Sprint(test.exp.Edges.Sort()) {
			t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, res.Edges, test.exp.Edges)
		}
		if len(res.Children) != len(test.exp.Children) {
			t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, res.Children, test.exp.Children)
		}
		for k, v_res := range res.Children {
			v_exp, ok := test.exp.Children[k]
			if !ok {
				t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, res.Children, test.exp.Children)
			}
			sort.Ints(v_exp)
			sort.Ints(v_res)
			if fmt.Sprint((v_exp)) != fmt.Sprint((v_res)) {
				t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, res.Children, test.exp.Children)
			}
		}
		if test.err != nil && err == nil {
			t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, err, test.err)
		}
		if test.err == nil && err != nil {
			t.Errorf("test %v: %v.Compose(%v, %v)\nGOT %v\nEXP %v", i, test.g, test.h, test.i, err, test.err)
		}
	}
}

func TestChooseNext(t *testing.T) {
	dummy_error := errors.New("")
	table := []struct {
		c    []int
		w    []float64
		prob bool
		exp  int
		err  error
	}{
		{[]int{}, []float64{}, false, -1, dummy_error},
		{[]int{0}, []float64{}, false, -1, dummy_error},
		{[]int{}, []float64{0.0}, false, -1, dummy_error},
		{[]int{0, 1, 2, 3}, []float64{0.0, 0.0, 0.0, 0.0}, false, -1, dummy_error},
		{[]int{0, 1, 2, 3}, []float64{0.0, 1.0, 0.0, 0.0}, false, 1, nil},
		{[]int{0, 1, 2, 3}, []float64{0.0, 0.0, 0.0, 1.0}, false, 3, nil},
		{[]int{10, 11, 12, 13}, []float64{10.0, 1.0, 100.0, 0.0}, true, 12, nil},
		{[]int{10, 11, 12, 13}, []float64{0.001, 0.99, 0.01, 0.1}, true, 11, nil},
		{[]int{10, 11, 12, 13}, []float64{1.0, 11.0, 111.0, 1111.0}, true, 13, nil},
	}
	for i, test := range table {
		var err error
		var res int
		if test.prob {
			choices := make(map[int]float64)
			for n := 0; n < 1000; n++ {
				c, _ := ChooseNext(test.c, test.w)
				choices[c]++
			}
			res = test.c[0]
			for k, v := range choices {
				if v > choices[res] {
					res = k
				}
			}
		} else {
			res, err = ChooseNext(test.c, test.w)
		}
		if res != test.exp {
			t.Errorf("test %v: ChooseNext(%v, %v)\nGOT %v\nEXP %v", i, test.c, test.w, res, test.exp)
		}
		if test.err != nil && err == nil {
			t.Errorf("test %v: ChooseNext(%v, %v)\nGOT %v\nEXP %v", i, test.c, test.w, err, test.err)
		}
		if test.err == nil && err != nil {
			t.Errorf("test %v: ChooseNext(%v, %v)\nGOT %v\nEXP %v", i, test.c, test.w, err, test.err)
		}
	}
}

func TestGraphRandomPath(t *testing.T) {
	table := []struct {
		e   EdgeList
		exp []Path
		err error
	}{
		{EdgeList{{0, 1, 1.0}}, []Path{{0, 1}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}}, []Path{{0, 1, 2}}, nil},
		{EdgeList{{0, 1, 1.0}, {0, 3, 1.0}, {0, 5, 1.0}, {1, 6, 1.0}, {3, 6, 1.0}, {5, 6, 1.0}}, []Path{{0, 1, 6}, {0, 3, 6}, {0, 5, 6}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 4, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {5, 7, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 4, 5, 6, 7, 8}, {0, 1, 2, 4, 5, 7, 8}, {0, 1, 2, 3, 4, 5, 7, 8}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 5, 1.0}, {2, 7, 1.0}, {2, 8, 1.0}, {3, 8, 1.0}, {5, 8, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 8, 9}, {0, 1, 2, 5, 8, 9}, {0, 1, 2, 7, 8, 9}, {0, 1, 2, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {2, 5, 1.0}, {2, 7, 1.0}, {3, 8, 1.0}, {5, 8, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 8, 9}, {0, 1, 2, 5, 8, 9}, {0, 1, 2, 7, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {3, 7, 1.0}, {4, 6, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 7, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {3, 5, 1.0}, {6, 8, 1.0}, {9, 11, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {14, 15, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {3, 5, 1.0}, {7, 9, 1.0}, {11, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 3, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 7, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 13, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {2, 12, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 12, 13}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {9, 14, 1.0}, {5, 14, 1.0}, {14, 15, 1.0}, {2, 14, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {2, 8, 1.0}, {3, 7, 1.0}, {4, 6, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 7, 8, 9}, {0, 1, 2, 8, 9}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {2, 12, 1.0}, {3, 5, 1.0}, {6, 8, 1.0}, {9, 11, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 12, 13}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 14, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 14, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}, {2, 14, 1.0}, {3, 5, 1.0}, {7, 9, 1.0}, {11, 13, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 14, 15}, {0, 1, 2, 3, 5, 14, 15}, {0, 1, 2, 7, 8, 9, 14, 15}, {0, 1, 2, 7, 9, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 13, 14, 15}, {0, 1, 2, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 13, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {10, 12, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 12, 13, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 11, 1.0}, {2, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {7, 9, 1.0}, {10, 11, 1.0}, {2, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {14, 15, 1.0}, {12, 14, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 11, 12, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 8, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 7, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 7, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 11, 12, 13, 14, 15}, {0, 1, 2, 11, 12, 14, 15}}, nil},
		{EdgeList{{0, 1, 1.0}, {1, 2, 1.0}, {2, 3, 1.0}, {3, 4, 1.0}, {4, 5, 1.0}, {5, 6, 1.0}, {6, 7, 1.0}, {7, 8, 1.0}, {8, 9, 1.0}, {9, 10, 1.0}, {10, 11, 1.0}, {11, 12, 1.0}, {12, 13, 1.0}, {13, 14, 1.0}, {1, 12, 1.0}, {6, 8, 1.0}}, []Path{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 12, 13, 14}}, nil},
	}
	for i, test := range table {
		g := NewGraph(test.e, []Expression{})
		res, err := g.RandomPath()
		found := false
		for _, p := range test.exp {
			if slices.Equal(res, p) {
				found = true
			}
		}
		if !found {
			t.Errorf("test %v: %v.RandomPath()\nGOT %v\nEXP %v", i, test.e, res, test.exp)
		}
		if test.err != nil && err == nil {
			t.Errorf("test %v: %v.RandomPath()\nGOT %v\nEXP %v", i, test.e, err, test.err)
		}
		if test.err == nil && err != nil {
			t.Errorf("test %v: %v.RandomPath()\nGOT %v\nEXP %v", i, test.e, err, test.err)
		}

	}
}
